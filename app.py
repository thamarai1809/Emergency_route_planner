# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FErygxo7h286HPDCrjECHSEMI2AtaSC2
"""



# Install required packages
!pip install osmnx networkx folium geopy gradio

# Imports
import osmnx as ox
import networkx as nx
import folium
import gradio as gr
from geopy.distance import geodesic
from geopy.geocoders import Nominatim

# Step 1: Load Chennai road network
place_name = "Chennai, India"
G = ox.graph_from_place(place_name, network_type="drive")

# Step 2: Get hospital locations in Chennai
tags = {"amenity": "hospital"}
hospitals = ox.features_from_place(place_name, tags=tags)
hospital_coords = hospitals[["name", "geometry"]].dropna()

# Step 3: Geocoder setup
geolocator = Nominatim(user_agent="emergency_route_planner")

def geocode_address(address):
    """Convert location name to (lat, lon)"""
    location = geolocator.geocode(address)
    if location:
        return location.latitude, location.longitude
    else:
        return None, None

from tempfile import NamedTemporaryFile


def get_summary(location_name, vehicle_speed_kmh):
    global map_html_store, map_file_store

    location = geolocator.geocode(f"{location_name}, Chennai, India")
    if not location:
        return "‚ùå Location not found. Please enter a valid area in Chennai.", None, None

    lat, lon = location.latitude, location.longitude
    user_node = ox.distance.nearest_nodes(G, X=lon, Y=lat)

    # Find nearest hospital
    nearest_hospital = None
    min_distance = float('inf')
    nearest_hospital_name = "Hospital"

    for _, row in hospital_coords.iterrows():
        point = row.geometry
        if point.geom_type == 'Point':
            hosp_coords = (point.y, point.x)
            dist = geodesic((lat, lon), hosp_coords).meters
            if dist < min_distance:
                min_distance = dist
                nearest_hospital = hosp_coords
                nearest_hospital_name = row.get("name", "Hospital")

    if nearest_hospital is None:
        return "‚ùå No hospital found nearby!", None, None

    hosp_node = ox.distance.nearest_nodes(G, X=nearest_hospital[1], Y=nearest_hospital[0])
    route = nx.shortest_path(G, user_node, hosp_node, weight='length')
    route_length_m = nx.path_weight(G, route, weight='length')

    # Estimate time based on user speed
    vehicle_speed_mps = vehicle_speed_kmh * 1000 / 3600
    estimated_time_min = route_length_m / vehicle_speed_mps / 60

    # Custom formatting for short durations
    if estimated_time_min < 1:
        time_str = "Less than 1 minute"
    else:
        time_str = f"{estimated_time_min:.1f} minutes"

    # Build Folium Map
    m = folium.Map(location=[lat, lon], zoom_start=13)
    folium.Marker([lat, lon], tooltip="Start", icon=folium.Icon(color="green")).add_to(m)
    folium.Marker(nearest_hospital, tooltip=f"{nearest_hospital_name}", icon=folium.Icon(color="red")).add_to(m)
    route_coords = [(G.nodes[n]['y'], G.nodes[n]['x']) for n in route]
    folium.PolyLine(route_coords, color="blue", weight=5).add_to(m)

    # Store map HTML and file
    map_html_store = m._repr_html_()
    map_file_store = ("emergency_route.html", m.get_root().render().encode('utf-8'))

    with NamedTemporaryFile(delete=False, suffix=".html", mode="w", encoding="utf-8") as f:
        f.write(m.get_root().render())
        map_file_path = f.name
    # Prepare output summary
    summary = (
        f"üöë **Nearest hospital:** {nearest_hospital_name}\n"
        f"üìè **Distance:** {route_length_m / 1000:.2f} km\n"
        f"‚è±Ô∏è **Estimated time:** {time_str}\n"
        f"üöó **Speed Used:** {vehicle_speed_kmh} km/h"
    )


    return summary, "emergency_route.html"

import gradio as gr
from gradio.themes.base import Base
from gradio.themes.utils import colors, fonts, sizes

class CustomTheme(Base):
    def __init__(self):
        super().__init__(
            primary_hue=colors.blue,
            secondary_hue=colors.green,
            neutral_hue=colors.gray,
            spacing_size=sizes.spacing_md,
            radius_size=sizes.radius_md,
            text_size=sizes.text_lg,
            font=fonts.GoogleFont("Times New Roman"),
            font_mono=fonts.GoogleFont("Courier New"),
        )
        super().set(
            body_background_fill="linear-gradient(135deg, #e0f7fa, #80deea, #4db6ac)",
            body_background_fill_dark="linear-gradient(135deg, #004d40, #00796b, #004d40)",
            button_primary_background_fill="linear-gradient(90deg, *primary_300, *secondary_400)",
            button_primary_background_fill_hover="linear-gradient(90deg, *primary_200, *secondary_300)",
            button_primary_text_color="white",
            button_primary_background_fill_dark="linear-gradient(90deg, *primary_600, *secondary_800)",
            slider_color="*secondary_300",
            slider_color_dark="*secondary_600",
            block_title_text_weight="600",
            block_border_width="3px",
            block_shadow="*shadow_drop_lg",
            button_primary_shadow="*shadow_drop_lg",
            button_large_padding="32px",
        )

theme = CustomTheme()

custom_css = """
#location_input {
    font-size: 18px;
    padding: 12px;
    border-radius: 8px;
    border: 2px solid #0ea5e9;
}

#route_summary_output {
    font-size: 20px;
    font-weight: 600;
    color: #0369a1;
    padding: 15px;
    border-radius: 8px;
    background-color: #e0f7fa;
}

#route_map_output {
    font-size: 18px;
    padding: 12px;
    border-radius: 8px;
    border: 2px solid #0ea5e9;
}
"""

import gradio as gr

# Define UI components but don't call .click() yet
location_input = gr.Dropdown(
    label="Select your location in Chennai",
    choices=[
        "T Nagar", "Adyar", "Velachery", "Anna Nagar", "Kodambakkam",
        "Tambaram", "Mylapore", "Guindy", "Porur", "Nungambakkam",
        "Saidapet", "Ambattur", "Royapettah", "Perambur", "Teynampet",
        "Egmore", "Mount Road", "Sholinganallur", "Thiruvanmiyur", "Vadapalani"
    ],
    value="T Nagar",
    elem_id="location_input"
)

speed_input = gr.Slider(label="Set your vehicle speed (km/h)", minimum=10, maximum=100, value=40, step=5)
get_route_btn = gr.Button("Get Shortest Route")
route_summary_output = gr.Markdown(elem_id="route_summary_output")
route_map_output = gr.File(label="Download Route Map (HTML)", elem_id="route_map_output")

# Build layout inside the Blocks context
with gr.Blocks(css=custom_css, theme=theme) as demo:
    gr.Markdown("<h1 style='font-size: 36px; font-weight: bold; text-align: center;'>üöë EMERGENCY MEDICAL RESPONSE ROUTE PLANNER</h1>")
    gr.Markdown("Select your location and vehicle speed to find the shortest route to the nearest hospital in Chennai.")

    with gr.Column():
        location_input.render()
        speed_input.render()
        get_route_btn.render()
        route_summary_output.render()
        route_map_output.render()

    # Now link the button click inside the context
    get_route_btn.click(fn=get_summary, inputs=[location_input, speed_input], outputs=[route_summary_output, route_map_output])

demo.launch()

